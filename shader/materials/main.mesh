#version 450

#extension GL_ARB_separate_shader_objects : enable
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_control_flow_attributes : enable

#extension GL_EXT_mesh_shader : require

#include "scalar_ops.glsl"

#define MESH
#include "materials_common.glsl"
#include "vertex_process.glsl"

layout(local_size_x = WORKGROUP_SIZE) in;
layout(triangles, max_vertices = MaxVert, max_primitives = MaxPrim) out;

taskPayloadSharedEXT Payload payload;

out gl_MeshPerVertexEXT {
  vec4 gl_Position;
  } gl_MeshVerticesEXT[];

#if defined(MAT_VARYINGS)
layout(location = 0) out Varyings shOut[];  // [max_vertices]
#endif

#if DEBUG_DRAW
layout(location = DEBUG_DRAW_LOC) out flat uint debugId[];
#endif

uvec2 processMeshlet(const uint meshletId) {
  const uint iboOffset = meshletId * MaxPrim + MaxPrim - 1;
  const uint bits      = indexes[iboOffset];
  uvec4 prim;
  prim.x = ((bits >>  0) & 0xFF);
  prim.y = ((bits >>  8) & 0xFF);

  uint vertCount = MaxVert;
  uint primCount = MaxPrim;
  if(prim.x==prim.y) {
    // last dummy triangle encodes primitive count
    prim.z = ((bits >> 16) & 0xFF);
    prim.w = ((bits >> 24) & 0xFF);

    primCount = prim.z;
    vertCount = prim.w;
    }
  return uvec2(vertCount, primCount);
  }

uvec3 processPrimitive(const uint meshletId, const uint outId) {
  const uint iboOffset = meshletId * MaxPrim + outId;
  const uint bits      = indexes[iboOffset];
  uvec3 prim;
  prim.x = ((bits >>  0) & 0xFF);
  prim.y = ((bits >>  8) & 0xFF);
  prim.z = ((bits >> 16) & 0xFF);
  return prim;
  }

vec4  processVertex(out Varyings var, uint instanceOffset, const uint meshletId, const uint laneID) {
  const uint vboOffset = meshletId * MaxVert + laneID;

#if (MESH_TYPE==T_PFX)
  const Vertex vert = pullVertex(instanceOffset);
#else
  const Vertex vert = pullVertex(vboOffset);
#endif

  vec4 position = processVertex(var, vert, instanceOffset, vboOffset);
  // position.y = -position.y;
  return position;
  }

#if defined(LVL_OBJECT)
// 2D Polyhedral Bounds of a Clipped, Perspective-Projected 3D Sphere. Michael Mara, Morgan McGuire. 2013
// https://zeux.io/2023/01/12/approximate-projected-bounds/
// TODO: productize
bool projectSphere(vec3 c, float r, out vec4 aabb, out float depth) {
  const float scale = 0.0009f;
  const float zfar  = 85.0;
  const float znear = 0.01; // scene.clipInfo.w;
  const float  k    = zfar / (zfar - znear);

  float P00   = scene.project[0][0];
  float P11   = scene.project[1][1];
  r *= scale;

  if(c.z + r < znear)
    return false;

  vec3  cr   = c * r;
  float czr2 = c.z * c.z - r * r;

  float vx   = sqrt(c.x * c.x + czr2);
  float minx = (vx * c.x - cr.z) / (vx * c.z + cr.x);
  float maxx = (vx * c.x + cr.z) / (vx * c.z - cr.x);

  float vy   = sqrt(c.y * c.y + czr2);
  float miny = (vy * c.y - cr.z) / (vy * c.z + cr.y);
  float maxy = (vy * c.y + cr.z) / (vy * c.z - cr.y);

  float camDepth = c.z - r;

  depth = ((camDepth - znear) * k)/camDepth;
  //znear / (c.z - r);
  aabb  = vec4(minx * P00, miny * P11, maxx * P00, maxy * P11);
  return true;
  }

void dbgBbox(const uint objId) {
  const ivec3 v[8] = {
    {0,0,0},{1,0,0},{1,1,0},{0,1,0},
    {0,0,1},{1,0,1},{1,1,1},{0,1,1},
    };
  const int ibo[] = {
    0, 1, 3, 3, 1, 2,
    1, 5, 2, 2, 5, 6,
    5, 4, 6, 6, 4, 7,
    4, 0, 7, 7, 0, 3,
    3, 2, 7, 7, 2, 6,
    4, 5, 0, 0, 5, 1
    };
  const vec3     b[2] = {bucket.bbox[0].xyz, bucket.bbox[1].xyz};
  const Instance obj  = pullInstance(objId);

  for(int i=0; i<8; ++i) {
    vec4 trPos;
    const ivec3 msk  = v[i];
    const vec3  pos  = vec3(b[msk.x].x,b[msk.y].y,b[msk.z].z);
    trPos = vec4(obj.mat*vec4(pos.xyz,1.0), 1.0);
    trPos = scene.viewProject*trPos;
    gl_MeshVerticesEXT[i].gl_Position = trPos;
#if defined(MAT_VARYINGS)
    shOut             [i].uv          = vec2(0);
#endif
    }
  for(int i=0; i<36; i+=3) {
    gl_PrimitiveTriangleIndicesEXT[i] = uvec3(ibo[i+0],ibo[i+1],ibo[i+2]);
    }
  }

void dbgSphere(const uint objId) {
  vec4 sphere = vec4(pullPosition(objId), bucket.bboxRadius);
  sphere.xyz = (scene.view*vec4(sphere.xyz,1)).xyz;

  vec4  aabb  = vec4(0);
  float depth = 0;
  if(!projectSphere(sphere.xyz,sphere.w,aabb,depth))
    return;

  const ivec2 v[4] = {
    {0,0},{0,1},{1,1},{1,0},
    };
  const int ibo[6] = {
    0, 1, 2, 0, 2, 3,
    };

  for(int i=0; i<4; ++i) {
    vec4 trPos = vec4(0);
    trPos.x = mix(aabb.x, aabb.z, v[i].x);
    trPos.y = mix(aabb.y, aabb.w, v[i].y);
    trPos.z = depth;
    trPos.w = 1;

    gl_MeshVerticesEXT[i].gl_Position = trPos;
#if defined(MAT_VARYINGS)
    shOut             [i].uv          = vec2(0);
#endif
    }
  for(int i=0; i<2; i++) {
    gl_PrimitiveTriangleIndicesEXT[i] = uvec3(ibo[i*3+0],ibo[i*3+1],ibo[i*3+2]);
    }
  }
#endif

uvec2 pullPayload() {
#if defined(LVL_OBJECT)
  const uint instanceOffset = payload.offsets[gl_WorkGroupID.y];
  const uint meshletId      = gl_WorkGroupID.x + push.firstMeshlet;
#elif (MESH_TYPE==T_LANDSCAPE)
  const uint instanceOffset = 0;
  const uint meshletId      = payload.offsets[gl_WorkGroupID.y] + push.firstMeshlet;
#else
  const uint instanceOffset = 0;
  const uint meshletId      = gl_WorkGroupID.x;
#endif
  return uvec2(instanceOffset, meshletId);
  }

void main() {
  const uvec2 pl         = pullPayload();
  const uint  instanceId = pl.x;
  const uint  meshletId  = pl.y;

  /*
  if(!visible) {
    // NOTE: produces compiller error on DX
    SetMeshOutputsEXT(0, 0);
    return;
    }
  */

  const uvec2 mesh      = processMeshlet(meshletId);
  const uint  vertCount = mesh.x;
  const uint  primCount = mesh.y;

  // Alloc outputs
  SetMeshOutputsEXT(vertCount, primCount);

  Varyings var;
  const uint laneID = gl_LocalInvocationIndex;

  // AMD: prefersLocalInvocationVertexOutput / prefersLocalInvocationPrimitiveOutput
  if(laneID<primCount)
    gl_PrimitiveTriangleIndicesEXT[laneID] = processPrimitive(meshletId, laneID);
  if(laneID<vertCount)
    gl_MeshVerticesEXT[laneID].gl_Position = processVertex(var, instanceId, meshletId, laneID);
#if defined(MAT_VARYINGS)
  if(laneID<vertCount)
    shOut[laneID]                          = var;
#endif

#if WORKGROUP_SIZE<64
  {
    const uint id = laneID+32;
    if(id<primCount)
      gl_PrimitiveTriangleIndicesEXT[id] = processPrimitive(meshletId, id);
    if(id<vertCount)
      gl_MeshVerticesEXT[id].gl_Position = processVertex(var, instanceId, meshletId, id);
#if defined(MAT_VARYINGS)
    if(laneID<vertCount)
      shOut[id]                          = var;
#endif
  }
#endif

#if 1 && (DEBUG_DRAW)
  for(uint i=laneID; i<MaxVert; i+=gl_WorkGroupSize.x) {
    debugId[i] = uint(meshletId);
    }
#endif

#if 0 && !defined(DEPTH_ONLY) && (MESH_TYPE==T_SKINING)
  // DEBUG CODE
  memoryBarrierShared();
  barrier();
  if(laneID==0) {
    // dbgBbox(objId);
    dbgSphere(objId);
    }
#endif
  }
